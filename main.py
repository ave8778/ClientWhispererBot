# -*- coding: utf-8 -*-
import asyncio
import os
from pathlib import Path
from datetime import datetime
from difflib import SequenceMatcher

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from loguru import logger

from knowledge_base import get_faq_answer, normalize
from openai_helper import ask_gpt
from booking_router import router as booking_router, cmd_survey
from memory_store import append_message  # NEW: persist dialogue

# ---------------------- –ó–ê–ì–†–£–ó–ö–ê .env ----------------------
env_path = Path(__file__).parent / ".env"
if env_path.exists():
    load_dotenv(env_path)

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç. –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ .env")

# ---------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------------------
LOGS_DIR = Path(__file__).parent / "logs"
LOGS_DIR.mkdir(exist_ok=True)
logger.add(LOGS_DIR / "bot.log",
           rotation="2 MB",
           retention=10,
           encoding="utf-8",
           enqueue=True,
           backtrace=True,
           diagnose=True)

# ---------------------- –ë–û–¢/DP ----------------------
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(booking_router)  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç FSM
dp.include_router(router)

# ---------------------- –£–¢–ò–õ–ò–¢–´ ----------------------
DIALOG_LOG = Path(__file__).parent / "logs" / "dialog_log.txt"

def log_dialog(user_id: int, role: str, text: str) -> None:
    DIALOG_LOG.parent.mkdir(exist_ok=True)
    with DIALOG_LOG.open("a", encoding="utf-8") as f:
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        text = text.replace("\n", " ").strip()
        f.write(f"[{ts}] {user_id} {role}: {text}\n")

GREETING_FULL = {"–ø—Ä–∏–≤–µ—Ç","–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ","–∑–¥—Ä–∞—Å—Ç–µ","–∑–¥—Ä–∞—Å—å—Ç–µ","–∑–¥–∞—Ä–æ–≤–∞","–∑–¥–∞—Ä–æ–≤","–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é","–¥–æ–±—Ä—ã–π –¥–µ–Ω—å","–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä","–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ","–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è","–¥–æ–±—Ä–æ–π –Ω–æ—á–∏","hello","hi","—Ö–∞–π","—Å–∞–ª—é—Ç","–∫—É","–ø—Ä–∏–≤",}
GREETING_PREFIXES = ("–∑–¥—Ä–∞–≤","–∑–¥—Ä–∞—Å—Ç","–∑–¥—Ä–∞—Å—å","–∑–¥–∞—Ä–æ–≤","–ø—Ä–∏–≤–µ—Ç","–ø—Ä–∏–≤","–¥–æ–±—Ä","hello","hi","—Ö–∞–π","—Å–∞–ª—é—Ç","–∫—É")

def is_greeting(text: str) -> bool:
    t = normalize(text)
    if not t:
        return False
    if len(t) <= 20:
        for tok in t.split():
            for pref in GREETING_PREFIXES:
                if tok.startswith(pref):
                    return True
        for g in GREETING_FULL:
            if SequenceMatcher(None, g, t).ratio() >= 0.72:
                return True
    toks = t.split()
    if len(toks) == 1:
        for pref in GREETING_PREFIXES:
            if toks[0].startswith(pref):
                return True
    return False

def build_menu_kb() -> ReplyKeyboardMarkup:
    rows = [["üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", "‚ÑπÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]]
    keyboard = [[KeyboardButton(text=txt) for txt in row] for row in rows]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)

async def send_menu(message: Message, preface: str | None = None) -> None:
    text = preface or ("–ß–µ–º –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n"
                       "üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å ‚Äî –∑–∞ 1‚Äì2 –º–∏–Ω—É—Ç—ã —Å–æ–±–µ—Ä—ë–º –∑–∞—è–≤–∫—É (—Å–∞–¥/—à–∫–æ–ª–∞, ‚Ññ, —Ç–∏–ø, –∫–æ–ª-–≤–æ –¥–µ—Ç–µ–π, –∫–æ–Ω—Ç–∞–∫—Ç).\n"
                       "‚ÑπÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∫–æ–Ω—Å—å–µ—Ä–∂–µ–º.")
    await message.answer(text, reply_markup=build_menu_kb())

# ---------------------- –•–ï–ù–î–õ–ï–†–´ ----------------------
@router.message(CommandStart())
async def start(message: Message) -> None:
    hello = ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø *–û–ª—å–∫–∏–Ω‚Äë–∫–æ–Ω—Å—å–µ—Ä–∂*.\n"
             "–ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –±—ã—Å—Ç—Ä–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –æ–ø—Ä–æ—Å.")
    await message.answer(hello)
    await send_menu(message)

@router.message(Command("menu"))
async def menu_cmd(message: Message) -> None:
    await send_menu(message)

@router.message(Command("survey"))
async def survey_cmd(message: Message, state: FSMContext) -> None:
    await cmd_survey(message, state)

@router.message(Command("book"))
async def book_cmd(message: Message, state: FSMContext) -> None:
    await cmd_survey(message, state)

@router.message(F.text == "üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
async def survey_entry(message: Message, state: FSMContext) -> None:
    await cmd_survey(message, state)

@router.message(F.text == "‚ÑπÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def chat_entry(message: Message) -> None:
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ª—é–±—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ ‚Äî —è –ø–æ–º–æ–≥—É –∏ –ø–æ–¥—Å–∫–∞–∂—É.")

@router.message(Command("ping"))
async def ping(message: Message) -> None:
    await message.answer("pong")

@router.message(F.text)
async def text_router(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id if message.from_user else 0
    text = message.text or ""
    log_dialog(user_id, "user", text)

    # –ï—Å–ª–∏ –∏–¥—ë—Ç –æ–ø—Ä–æ—Å ‚Äî –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è (–∏ –Ω–µ –ø–∏—à–µ–º –≤ memory, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –∞–Ω–∫–µ—Ç–µ)
    if (await state.get_state()) is not None:
        return

    # Slash-–∫–æ–º–∞–Ω–¥—ã –ª–æ–≤—è—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    if text.strip().startswith("/"):
        return

    # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    append_message(user_id, "user", text)

    # 0) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è => –º–µ–Ω—é
    if is_greeting(text):
        reply = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –∞–ª—å–±–æ–º–∞–º–∏."
        await send_menu(message, preface=reply)
        append_message(user_id, "assistant", reply)
        return

    # 1) FAQ
    res = get_faq_answer(text)
    if res.answer:
        await message.answer(res.answer)
        log_dialog(user_id, "bot", res.answer)
        append_message(user_id, "assistant", res.answer)

        if res.suggestions:
            kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=s)] for s in res.suggestions],
                resize_keyboard=True, one_time_keyboard=True
            )
            await message.answer("üìå –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:", reply_markup=kb)
        return

    if res.suggestions:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=s)] for s in res.suggestions],
            resize_keyboard=True, one_time_keyboard=True
        )
        hint = "–Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å? –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
        await message.answer(hint, reply_markup=kb)
        append_message(user_id, "assistant", hint)
        return

    # 2) GPT (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ memory_store)
    gpt_answer = await ask_gpt(user_id, text)
    if gpt_answer:
        await message.answer(gpt_answer)
        log_dialog(user_id, "bot", gpt_answer)
        # ask_gpt —É–∂–µ –ø–∏—à–µ—Ç –≤ memory_store
        return

    # 3) fallback
    fallback = "ü§î –ú–æ–≥—É –ø–æ–º–æ—á—å –≤ –¥–∏–∞–ª–æ–≥–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –æ–ø—Ä–æ—Å. –ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?"
    await message.answer(fallback)
    await send_menu(message)
    append_message(user_id, "assistant", fallback)
    log_dialog(user_id, "bot", fallback)

# ---------------------- –ó–ê–ü–£–°–ö ----------------------
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
