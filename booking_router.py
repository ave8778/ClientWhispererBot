# -*- coding: utf-8 -*-
from __future__ import annotations
from pathlib import Path
from datetime import datetime
import re
import os

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

from knowledge_base import normalize
from memory_store import update_profile

router = Router()

# --- ENV for OWNER notification ---
env_path = Path(__file__).parent / ".env"
if env_path.exists():
    load_dotenv(env_path)

OWNER_ID = int(os.getenv("OWNER_ID", "0") or "0")

# --- States ---
class Survey(StatesGroup):
    level = State()            # —à–∫–æ–ª–∞/—Å–∞–¥
    org_number = State()       # –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã/—Å–∞–¥–∞
    album_type = State()       # –æ–±—â–∏–π/–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π
    count_children = State()   # —Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –±–µ—Ä—É—Ç –∞–ª—å–±–æ–º—ã
    contact_method = State()   # VK/WhatsApp
    contact_value = State()    # —Å—Å—ã–ª–∫–∞/–Ω–æ–º–µ—Ä
    confirm = State()          # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

# --- Helpers / Keyboards ---
PHONE_RE = re.compile(r"^\+?\d[\d\s\-\(\)]{7,}$", re.U | re.I)

def _now() -> str:
    from datetime import datetime
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def _lead_path() -> Path:
    p = Path(__file__).parent / "data"
    p.mkdir(exist_ok=True)
    return p / "leads.csv"

def save_lead(row: list[str]) -> None:
    path = _lead_path()
    if not path.exists():
        path.write_text("ts,user_id,level,org_number,album_type,count_children,contact_method,contact,username,full_name\n", encoding="utf-8")
    with path.open("a", encoding="utf-8") as f:
        f.write(",".join(x.replace(",", " ").strip() for x in row) + "\n")

def level_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–µ—Ç—Å–∫–∏–π —Å–∞–¥", callback_data="level_kinder"),
         InlineKeyboardButton(text="–®–∫–æ–ª–∞", callback_data="level_school")]
    ])

def album_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±—â–∏–π", callback_data="album_common"),
         InlineKeyboardButton(text="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π", callback_data="album_individual")]
    ])

def contact_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="VK", callback_data="contact_vk"),
         InlineKeyboardButton(text="WhatsApp", callback_data="contact_wa")]
    ])

def confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_cancel")]
    ])

def summary_text(data: dict) -> str:
    return (
        "üìù *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:*\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: **{data.get('level','‚Äì')}**\n"
        f"‚Ä¢ ‚Ññ —à–∫–æ–ª—ã/—Å–∞–¥–∞: **{data.get('org_number','‚Äì')}**\n"
        f"‚Ä¢ –¢–∏–ø –∞–ª—å–±–æ–º–∞: **{data.get('album_type','‚Äì')}**\n"
        f"‚Ä¢ –ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π: **{data.get('count_children','‚Äì')}**\n"
        f"‚Ä¢ –°–≤—è–∑—å: **{data.get('contact_method','‚Äì')} ‚Äî {data.get('contact','‚Äì')}**\n"
    )

def explain_diff(level: str | None) -> str:
    lvl = (level or "").lower()
    if "—Å–∞–¥" in lvl:
        return (
            "–†–∞–∑–Ω–∏—Ü–∞:\n"
            "‚Ä¢ *–û–±—â–∏–π* ‚Äî –≤—ë—Ä—Å—Ç–∫–∞ –æ–¥–Ω–∞ –Ω–∞ –≤—Å–µ—Ö, —Ä–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ. –§–æ—Ä–º–∞—Ç 20√ó30, 20 —Å—Ç—Ä. ‚Äî **3500 ‚ÇΩ**.\n"
            "‚Ä¢ *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π* ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –≤—ë—Ä—Å—Ç–∫–∞; –ú–∏–Ω–∏ **2700 ‚ÇΩ**, –õ–∞–π—Ç **3700 ‚ÇΩ**, –ú–∞–∫—Å–∏ **4600 ‚ÇΩ**.\n"
            "_–£—Å–ª–æ–≤–∏—è: –æ—Ç 15 –∞–ª—å–±–æ–º–æ–≤ –∏ —Å—ä—ë–º–∫–∞ –¥–æ –º–∞—Ä—Ç–∞._"
        )
    if "—à–∫–æ–ª" in lvl:
        return (
            "–†–∞–∑–Ω–∏—Ü–∞:\n"
            "‚Ä¢ *–û–±—â–∏–π* ‚Äî ¬´–ö–ª–∞—Å—Å–Ω—ã–π¬ª **2200 ‚ÇΩ**, ¬´–î—Ä—É–∂–Ω—ã–π¬ª **3200 ‚ÇΩ**, ¬´–ë–æ–ª—å—à–æ–π¬ª **4400 ‚ÇΩ**.\n"
            "‚Ä¢ *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π* ‚Äî ¬´–ü–ª–∞–Ω—à–µ—Ç¬ª **2000 ‚ÇΩ**, ¬´–ú–∏–Ω–∏¬ª **3300 ‚ÇΩ**, ¬´–ú–∞–∫—Å–∏¬ª **4100 ‚ÇΩ**.\n"
            "_–£—Å–ª–æ–≤–∏—è: –æ—Ç 15 –∞–ª—å–±–æ–º–æ–≤ –∏ —Å—ä—ë–º–∫–∞ –¥–æ –º–∞—Ä—Ç–∞._"
        )
    # –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    return (
        "–î–ª—è —Ç–æ—á–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —ç—Ç–æ –¥–ª—è *–¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞* –∏–ª–∏ *—à–∫–æ–ª—ã*? "
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ.",)

# --- Start survey ---
@router.message(Command("survey"))
@router.message(Command("book"))
async def cmd_survey(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –±—ã—Å—Ç—Ä–æ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É.\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, —ç—Ç–æ *–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥* –∏–ª–∏ *—à–∫–æ–ª–∞*:",
        reply_markup=level_kb()
    )
    await state.set_state(Survey.level)

@router.message(F.text.func(lambda t: t and ("–ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å" in t.lower() or "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" in t.lower())))
async def trigger_survey(message: Message, state: FSMContext):
    if await state.get_state() is None:
        await cmd_survey(message, state)

# --- Flow ---
@router.callback_query(Survey.level, F.data.in_(("level_kinder", "level_school")))
async def set_level(cb: CallbackQuery, state: FSMContext):
    level = "–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥" if cb.data == "level_kinder" else "—à–∫–æ–ª–∞"
    await state.update_data(level=level)
    update_profile(cb.from_user.id, level=level)  # persist
    await cb.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã/—Å–∞–¥–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã), –Ω–∞–ø—Ä–∏–º–µ—Ä: 27")
    await state.set_state(Survey.org_number)
    await cb.answer()

# –ü–æ–∑–≤–æ–ª—è–µ–º –≤–≤–æ–¥–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞
@router.message(Survey.level, F.text)
async def set_level_by_text(message: Message, state: FSMContext):
    t = normalize(message.text or "")
    if "—Å–∞–¥" in t:
        level = "–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥"
    elif "—à–∫–æ–ª" in t:
        level = "—à–∫–æ–ª–∞"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π: *–î–µ—Ç—Å–∫–∏–π —Å–∞–¥* –∏–ª–∏ *–®–∫–æ–ª–∞*.")
        return
    await state.update_data(level=level)
    update_profile(message.from_user.id, level=level)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã/—Å–∞–¥–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã), –Ω–∞–ø—Ä–∏–º–µ—Ä: 27")
    await state.set_state(Survey.org_number)

@router.message(Survey.org_number, F.text)
async def set_org_number(message: Message, state: FSMContext):
    # –ì–ê–†–ê–ù–¢–ò–Ø –ü–û–†–Ø–î–ö–ê: –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞
    data = await state.get_data()
    if not data.get("level"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ: —ç—Ç–æ *–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥* –∏–ª–∏ *—à–∫–æ–ª–∞*.", reply_markup=level_kb())
        await state.set_state(Survey.level)
        return

    txt = re.sub(r"[^\d]", "", message.text or "")
    if not txt:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–Ω–æ–º–µ—Ä* —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(org_number=txt)
    update_profile(message.from_user.id, org_number=txt)
    await message.answer("–ö–∞–∫–æ–π —Ç–∏–ø –∞–ª—å–±–æ–º–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî *–û–±—â–∏–π* –∏–ª–∏ *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π*?", reply_markup=album_kb())
    await state.set_state(Survey.album_type)

@router.callback_query(Survey.album_type, F.data.in_(("album_common", "album_individual")))
async def set_album_type(cb: CallbackQuery, state: FSMContext):
    album = "–æ–±—â–∏–π" if cb.data == "album_common" else "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π"
    await state.update_data(album_type=album)
    update_profile(cb.from_user.id, album_type=album)
    await cb.message.edit_text("–°–∫–æ–ª—å–∫–æ *–¥–µ—Ç–µ–π* –±—É–¥—É—Ç –±—Ä–∞—Ç—å –∞–ª—å–±–æ–º—ã? (—á–∏—Å–ª–æ–º)")
    await state.set_state(Survey.count_children)
    await cb.answer()

@router.message(Survey.album_type, F.text)
async def album_type_text(message: Message, state: FSMContext):
    data = await state.get_data()
    t = normalize(message.text or "")
    if "—Ä–∞–∑–Ω–∏—Ü" in t or "—á—Ç–æ —Ç–∞–∫–æ–µ" in t or "–æ–±—ä—è—Å" in t:
        diff = explain_diff(data.get("level"))
        if isinstance(diff, tuple):  # –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω —É—Ä–æ–≤–µ–Ω—å
            await message.answer(diff[0], reply_markup=level_kb())
            await state.set_state(Survey.level)
        else:
            await message.answer(diff, reply_markup=album_kb())
        return
    if "–æ–±—â" in t:
        await state.update_data(album_type="–æ–±—â–∏–π")
        update_profile(message.from_user.id, album_type="–æ–±—â–∏–π")
        await message.answer("–ü—Ä–∏–Ω—è—Ç–æ: *–æ–±—â–∏–π*. –°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –±—É–¥—É—Ç –±—Ä–∞—Ç—å –∞–ª—å–±–æ–º—ã? (—á–∏—Å–ª–æ–º)")
        await state.set_state(Survey.count_children)
        return
    if "–∏–Ω–¥" in t:
        await state.update_data(album_type="–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π")
        update_profile(message.from_user.id, album_type="–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π")
        await message.answer("–ü—Ä–∏–Ω—è—Ç–æ: *–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π*. –°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –±—É–¥—É—Ç –±—Ä–∞—Ç—å –∞–ª—å–±–æ–º—ã? (—á–∏—Å–ª–æ–º)")
        await state.set_state(Survey.count_children)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∏–ø –∞–ª—å–±–æ–º–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=album_kb())

@router.message(Survey.count_children, F.text)
async def set_count_children(message: Message, state: FSMContext):
    txt = message.text.strip()
    if not txt.isdigit() or int(txt) <= 0 or int(txt) > 1000:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *—á–∏—Å–ª–æ* –æ—Ç 1 –¥–æ 1000.")
        return
    await state.update_data(count_children=int(txt))
    update_profile(message.from_user.id, count_children=int(txt))
    await message.answer("–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è ‚Äî *VK* –∏–ª–∏ *WhatsApp*?", reply_markup=contact_kb())
    await state.set_state(Survey.contact_method)

@router.callback_query(Survey.contact_method, F.data.in_(("contact_vk", "contact_wa")))
async def set_contact_method(cb: CallbackQuery, state: FSMContext):
    method = "VK" if cb.data == "contact_vk" else "WhatsApp"
    await state.update_data(contact_method=method)
    update_profile(cb.from_user.id, contact_method=method)
    if method == "VK":
        await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ *—Å—Å—ã–ª–∫—É –Ω–∞ VK* –∏–ª–∏ @–Ω–∏–∫.")
    else:
        await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ *–Ω–æ–º–µ—Ä WhatsApp* –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...")
    await state.set_state(Survey.contact_value)
    await cb.answer()

@router.message(Survey.contact_value, F.text)
async def set_contact_value(message: Message, state: FSMContext):
    contact = message.text.strip()
    data = await state.get_data()
    if data.get("contact_method") == "WhatsApp" and not PHONE_RE.match(contact):
        await message.answer("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67")
        return
    await state.update_data(contact=contact)
    update_profile(message.from_user.id, contact=contact)
    data = await state.get_data()
    await message.answer(summary_text(data), reply_markup=confirm_kb())
    await state.set_state(Survey.confirm)

@router.callback_query(Survey.confirm, F.data == "confirm_cancel")
async def cancel(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /survey")
    await cb.answer()

@router.callback_query(Survey.confirm, F.data == "confirm_send")
async def send(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    user = cb.from_user
    ts = _now()
    row = [
        ts,
        str(user.id),
        data.get("level",""),
        data.get("org_number",""),
        data.get("album_type",""),
        str(data.get("count_children","")),
        data.get("contact_method",""),
        data.get("contact",""),
        (user.username or ""),
        f"{user.first_name or ''} {user.last_name or ''}".strip(),
    ]
    save_lead(row)

    # Notify owner
    if OWNER_ID:
        owner_text = (
            "üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–æ–ø—Ä–æ—Å)*\n"
            f"{summary_text(data)}\n"
            f"–û—Ç: @{user.username or '‚Äî'} (id {user.id})"
        )
        try:
            await cb.message.bot.send_message(OWNER_ID, owner_text, parse_mode="Markdown")
        except Exception:
            pass

    await cb.message.edit_text("–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await cb.answer()
