# -*- coding: utf-8 -*-
"""
–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è FAQ-–±–∞–∑–∞ –¥–ª—è –±–æ—Ç–∞-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞.
‚Äî –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è RU-—Ç–µ–∫—Å—Ç–∞ (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, "—ë"‚Üí"–µ", –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è).
‚Äî –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º + —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (difflib) —Å–æ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Å–∫–æ—Ä–∏–Ω–≥–æ–º.
‚Äî –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç.
‚Äî –ü—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –æ–¥–∏–Ω —Ñ–∞–π–ª, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π. 
(–ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ rapidfuzz ‚Äî –±—É–¥–µ—Ç –µ—â—ë —Ç–æ—á–Ω–µ–µ, —Å–º. TODO –≤–Ω–∏–∑—É.)
"""

from dataclasses import dataclass
from functools import lru_cache
from difflib import SequenceMatcher
import re
from typing import List, Tuple, Dict, Optional

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------

_PUNCT_RE = re.compile(r"[^\w\s]+", re.U)

def normalize(text: str) -> str:
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∫ –≤–∏–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    t = text.lower().replace("—ë", "–µ")
    t = _PUNCT_RE.sub(" ", t)
    t = re.sub(r"\s+", " ", t).strip()
    return t

def sim(a: str, b: str) -> float:
    """–ì—Ä—É–±–∞—è –ø–æ—Ö–æ–∂–µ—Å—Ç—å [0..1] –ø–æ difflib (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)."""
    return SequenceMatcher(None, a, b).ratio()

# ---------- –î–ê–ù–ù–´–ï ----------

@dataclass(frozen=True)
class Intent:
    key: str                    # –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    triggers: Tuple[str, ...]   # –°–∏–Ω–æ–Ω–∏–º—ã/—Ñ—Ä–∞–∑—ã-—Ç—Ä–∏–≥–≥–µ—Ä—ã
    answer: str                 # –ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (Markdown/Telegram)

# –¢–µ–∫—Å—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
ANSWERS = {
    "–æ–±—â–∏–π_—Å–∞–¥": (
        "üìò **–û–±—â–∏–π –∞–ª—å–±–æ–º ¬´–ü—Ä–æ –º–µ–Ω—è –∏ –Ω–∞—à—É –≥—Ä—É–ø–ø—É¬ª**\n"
        "–í—ë—Ä—Å—Ç–∫–∞ ‚Äî –æ–¥–Ω–∞ –Ω–∞ –≤—Å–µ—Ö, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç. "
        "–ü–æ—Ä—Ç—Ä–µ—Ç –Ω–∞ –æ–±–ª–æ–∂–∫–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –í –∞–ª—å–±–æ–º–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∫–∞–¥—Ä—ã ‚Äî "
        "–≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ. –ù–µ–∂–Ω–∞—è —Ä–µ—Ç—É—à—å –≤–∫–ª—é—á–µ–Ω–∞. –§–æ—Ä–º–∞—Ç ‚Äî 20√ó30, –µ–¥–∏–Ω—ã–π –¥–∏–∑–∞–π–Ω.\n\n"
        "üí∞ 20 —Å—Ç—Ä. (10 —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤) ‚Äî **3500 ‚ÇΩ**, 2 —Å—ä—ë–º–∫–∏, 2‚Äì3 –ª–æ–∫–∞—Ü–∏–∏.\n"
        "–¶–µ–Ω—ã –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 15 –∞–ª—å–±–æ–º–æ–≤ (‚â•85% –≥—Ä—É–ø–ø—ã) –∏ —Å—ä—ë–º–∫–µ **–¥–æ –º–∞—Ä—Ç–∞**.\n"
        "–î—É–±–ª–∏–∫–∞—Ç ‚Äî –∑–∞ 50%. –§–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
    ),
    "–∏–Ω–¥–∏–≤_—Å–∞–¥": (
        "üìó **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–ª—å–±–æ–º (–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥)** ‚Äî –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫.\n"
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –≤—ë—Ä—Å—Ç–∫–∞: —Ñ–æ—Ç–æ —Ä–µ–±—ë–Ω–∫–∞ –æ–¥–∏–Ω, —Å –¥—Ä—É–∑—å—è–º–∏, –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è–º–∏.\n"
        "–ù–µ–∂–Ω–∞—è —Ä–µ—Ç—É—à—å –≤–∫–ª—é—á–µ–Ω–∞. –§–æ—Ä–º–∞—Ç ‚Äî 20√ó20 –∏–ª–∏ 20√ó30; –º–æ–∂–Ω–æ 2 –¥–∏–∑–∞–π–Ω–∞ (–º–∞–ª—å—á–∏–∫–∏/–¥–µ–≤–æ—á–∫–∏).\n\n"
        "üí∞ –ú–∏–Ω–∏ (4 —Å—Ç—Ä., 2 —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞) ‚Äî **2700 ‚ÇΩ**\n"
        "üí∞ –õ–∞–π—Ç (8 —Å—Ç—Ä., 4 —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞) ‚Äî **3700 ‚ÇΩ**\n"
        "üí∞ –ú–∞–∫—Å–∏ (12 —Å—Ç—Ä., 6 —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤) ‚Äî **4600 ‚ÇΩ**\n"
        "–¶–µ–Ω—ã –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 15 –∞–ª—å–±–æ–º–æ–≤ (‚â•85% –≥—Ä—É–ø–ø—ã) –∏ —Å—ä—ë–º–∫–µ **–¥–æ –º–∞—Ä—Ç–∞**.\n"
        "–î—É–±–ª–∏–∫–∞—Ç ‚Äî –∑–∞ 50%. –§–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
    ),
    "–∏–Ω–¥–∏–≤_—à–∫–æ–ª–∞": (
        "üìó **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —à–∫–æ–ª—å–Ω—ã–π –∞–ª—å–±–æ–º** ‚Äî –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫.\n"
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –≤—ë—Ä—Å—Ç–∫–∞: —Ñ–æ—Ç–æ —Ä–µ–±—ë–Ω–∫–∞ –æ–¥–∏–Ω, —Å –¥—Ä—É–∑—å—è–º–∏, —Å —É—á–∏—Ç–µ–ª–µ–º. "
        "–ù–µ–∂–Ω–∞—è —Ä–µ—Ç—É—à—å –≤–∫–ª—é—á–µ–Ω–∞. –§–æ—Ä–º–∞—Ç ‚Äî 20√ó20 –∏–ª–∏ 20√ó30.\n\n"
        "üí∞ –ü–ª–∞–Ω—à–µ—Ç (2 —Å—Ç—Ä., 1 —Ä–∞–∑–≤–æ—Ä–æ—Ç) ‚Äî **2000 ‚ÇΩ**\n"
        "üí∞ –ú–∏–Ω–∏ (6 —Å—Ç—Ä., 3 —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞) ‚Äî **3300 ‚ÇΩ**\n"
        "üí∞ –ú–∞–∫—Å–∏ (10 —Å—Ç—Ä., 5 —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤) ‚Äî **4100 ‚ÇΩ**\n"
        "–¶–µ–Ω—ã –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 15 –∞–ª—å–±–æ–º–æ–≤ (‚â•85% –∫–ª–∞—Å—Å–∞) –∏ —Å—ä—ë–º–∫–µ **–¥–æ –º–∞—Ä—Ç–∞**.\n"
        "–î—É–±–ª–∏–∫–∞—Ç ‚Äî –∑–∞ 50%. –§–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
    ),
    "–æ–±—â–∏–π_—à–∫–æ–ª–∞": (
        "üìò **–û–±—â–∏–π —à–∫–æ–ª—å–Ω—ã–π –∞–ª—å–±–æ–º ¬´–ü—Ä–æ –º–µ–Ω—è –∏ –Ω–∞—à –∫–ª–∞—Å—Å¬ª**\n"
        "–í—ë—Ä—Å—Ç–∫–∞ ‚Äî –æ–¥–Ω–∞ –Ω–∞ –≤—Å–µ—Ö, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç. "
        "–ü–æ—Ä—Ç—Ä–µ—Ç –Ω–∞ –æ–±–ª–æ–∂–∫–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –°—ä—ë–º–∫–∞ ‚Äî –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∫–∞–¥—Ä—ã, "
        "—Ä–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ.\n\n"
        "üí∞ –ö–ª–∞—Å—Å–Ω—ã–π (4 —Å—Ç—Ä., 2 —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞) ‚Äî **2200 ‚ÇΩ**\n"
        "üí∞ –î—Ä—É–∂–Ω—ã–π (10 —Å—Ç—Ä., 5 —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤) ‚Äî **3200 ‚ÇΩ**\n"
        "üí∞ –ë–æ–ª—å—à–æ–π (20‚Äì30 —Å—Ç—Ä., 10‚Äì15 —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤) ‚Äî **4400 ‚ÇΩ**\n"
        "–¶–µ–Ω—ã –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 15 –∞–ª—å–±–æ–º–æ–≤ (‚â•85% –∫–ª–∞—Å—Å–∞) –∏ —Å—ä—ë–º–∫–µ **–¥–æ –º–∞—Ä—Ç–∞**.\n"
        "–î—É–±–ª–∏–∫–∞—Ç ‚Äî –∑–∞ 50%. –§–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
    ),
    "—É—Å–ª–æ–≤–∏—è": (
        "üìå **–£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞**\n"
        "–¶–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç **15 –∞–ª—å–±–æ–º–æ–≤** –∏ ‚â•**85%** –≥—Ä—É–ø–ø—ã/–∫–ª–∞—Å—Å–∞. "
        "–í—Å–µ —Å—ä—ë–º–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ **–¥–æ –º–∞—Ä—Ç–∞**. –í–æ–∑–º–æ–∂–Ω–∞ —Å—ä—ë–º–∫–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö."
    ),
    "–¥–æ–ø_—Ä–∞–∑–≤–æ—Ä–æ—Ç": (
        "‚ûï **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã**\n"
        "‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç ‚Äî **+400 ‚ÇΩ** (–≥—Ä—É–ø–ø–∞/–∫–ª–∞—Å—Å –Ω–∞ —Ñ–æ—Ç–æ, —Ä–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞ –≤—Å–µ—Ö –∫–∞–¥—Ä–∞—Ö)\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç ‚Äî **+600 ‚ÇΩ** (–≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ)"
    ),
    "–¥—É–±–ª–∏–∫–∞—Ç": (
        "üìö **–î—É–±–ª–∏–∫–∞—Ç –∞–ª—å–±–æ–º–∞** ‚Äî –∑–∞ **50%** –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ. "
        "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –±–∞–±—É—à–∫–∞–º –∏ –¥–µ–¥—É—à–∫–∞–º."
    ),
    "–ø–µ—á–∞—Ç—å": (
        "üñ®Ô∏è **–ü–µ—á–∞—Ç—å –∏ –±—É–º–∞–≥–∞**\n"
        "–ü—Ä–µ–º–∏—É–º-–∫–∞—á–µ—Å—Ç–≤–æ (–∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –æ–±—â–∏—Ö –∞–ª—å–±–æ–º–æ–≤). "
        "–†–∞–±–æ—Ç–∞–µ–º —Å –ª—É—á—à–∏–º–∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –±—É–º–∞–≥–æ–π."
    ),
    "–¥–æ—Å—Ç–∞–≤–∫–∞": (
        "üöö **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∞–ª—å–±–æ–º—ã**\n"
        "–í—ã–¥–∞—á–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã/–∫–ª–∞—Å—Å–∞."
    ),
    "–∫–æ–Ω—Ç–∞–∫—Ç—ã": (
        "üì¨ **–°–≤—è–∑—å**\n"
        "Telegram: @ave8778\n"
        "–°–∞–π—Ç: https://olkaevchenko.ru"
    ),
}

INTENTS: Tuple[Intent, ...] = (
    Intent(
        key="–æ–±—â–∏–π_—Å–∞–¥",
        triggers=("–æ–±—â–∏–π –∞–ª—å–±–æ–º —Å–∞–¥","–ø—Ä–æ –≥—Ä—É–ø–ø—É","–ø—Ä–æ –Ω–∞—Å","–∞–ª—å–±–æ–º –Ω–∞ –≤—Å–µ—Ö","–æ–±—â–∏–π —Å–∞–¥","–æ–±—â–∞—è –≤—ë—Ä—Å—Ç–∫–∞ —Å–∞–¥"),
        answer=ANSWERS["–æ–±—â–∏–π_—Å–∞–¥"],
    ),
    Intent(
        key="–∏–Ω–¥–∏–≤_—Å–∞–¥",
        triggers=("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–ª—å–±–æ–º —Å–∞–¥","–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–ª—å–±–æ–º —Å–∞–¥","–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∫–∞ —Å–∞–¥","—Å–≤–æ–π –∞–ª—å–±–æ–º —Å–∞–¥"),
        answer=ANSWERS["–∏–Ω–¥–∏–≤_—Å–∞–¥"],
    ),
    Intent(
        key="–∏–Ω–¥–∏–≤_—à–∫–æ–ª–∞",
        triggers=("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–ª—å–±–æ–º —à–∫–æ–ª–∞","–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–ª—å–±–æ–º —à–∫–æ–ª–∞","—Å–≤–æ–π –∞–ª—å–±–æ–º —à–∫–æ–ª–∞"),
        answer=ANSWERS["–∏–Ω–¥–∏–≤_—à–∫–æ–ª–∞"],
    ),
    Intent(
        key="–æ–±—â–∏–π_—à–∫–æ–ª–∞",
        triggers=("–æ–±—â–∏–π –∞–ª—å–±–æ–º —à–∫–æ–ª–∞","–ø—Ä–æ –∫–ª–∞—Å—Å","–Ω–∞—à –∫–ª–∞—Å—Å","–æ–±—â–∏–π —à–∫–æ–ª–∞","–≤–µ—Å—å –∫–ª–∞—Å—Å","–æ–±—â–∞—è –≤—ë—Ä—Å—Ç–∫–∞ —à–∫–æ–ª–∞"),
        answer=ANSWERS["–æ–±—â–∏–π_—à–∫–æ–ª–∞"],
    ),
    Intent(
        key="—É—Å–ª–æ–≤–∏—è",
        triggers=("—É—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞","–º–∏–Ω–∏–º—É–º –∞–ª—å–±–æ–º–æ–≤","—Å—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞"),
        answer=ANSWERS["—É—Å–ª–æ–≤–∏—è"],
    ),
    Intent(
        key="–¥–æ–ø_—Ä–∞–∑–≤–æ—Ä–æ—Ç",
        triggers=("–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç","–¥–æ–ø —Ä–∞–∑–≤–æ—Ä–æ—Ç","extra page","extra —Ä–∞–∑–≤–æ—Ä–æ—Ç"),
        answer=ANSWERS["–¥–æ–ø_—Ä–∞–∑–≤–æ—Ä–æ—Ç"],
    ),
    Intent(
        key="–¥—É–±–ª–∏–∫–∞—Ç",
        triggers=("–¥—É–±–ª–∏–∫–∞—Ç","–∫–æ–ø–∏—è –∞–ª—å–±–æ–º–∞","–≤—Ç–æ—Ä–æ–π –∞–ª—å–±–æ–º","–∞–ª—å–±–æ–º –¥–ª—è –±–∞–±—É—à–∫–∏"),
        answer=ANSWERS["–¥—É–±–ª–∏–∫–∞—Ç"],
    ),
    Intent(
        key="–ø–µ—á–∞—Ç—å",
        triggers=("–ø–µ—á–∞—Ç—å","–±—É–º–∞–≥–∞","—Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏—è","–∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏"),
        answer=ANSWERS["–ø–µ—á–∞—Ç—å"],
    ),
    Intent(
        key="–¥–æ—Å—Ç–∞–≤–∫–∞",
        triggers=("–¥–æ—Å—Ç–∞–≤–∫–∞","–ø–æ–ª—É—á–µ–Ω–∏–µ","–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å","–∫–æ–≥–¥–∞ –æ—Ç–¥–∞–¥—É—Ç"),
        answer=ANSWERS["–¥–æ—Å—Ç–∞–≤–∫–∞"],
    ),
    Intent(
        key="–∫–æ–Ω—Ç–∞–∫—Ç—ã",
        triggers=("–∫–æ–Ω—Ç–∞–∫—Ç—ã","—Å–≤—è–∑–∞—Ç—å—Å—è","–∫—É–¥–∞ –ø–∏—Å–∞—Ç—å","—Ç–µ–ª–µ—Ñ–æ–Ω","–ø–æ—á—Ç–∞"),
        answer=ANSWERS["–∫–æ–Ω—Ç–∞–∫—Ç—ã"],
    ),
)

# –ü—Ä–µ–¥—Ä–∞—Å—á—ë—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)
NORM_TRIGGERS: Dict[str, List[str]] = {
    intent.key: [normalize(t) for t in intent.triggers] for intent in INTENTS
}

# ---------- –ü–û–ò–°–ö ----------

@dataclass(frozen=True)
class MatchResult:
    answer: Optional[str]
    intent_key: Optional[str]
    confidence: float
    suggestions: Tuple[str, ...] = ()

@lru_cache(maxsize=2048)
def get_faq_answer(user_query: str, *, threshold: float = 0.58) -> MatchResult:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –ø–æ —Å–º—ã—Å–ª–æ–≤–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é.
    –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ‚Äî –≤–µ—Ä–Ω—ë—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ (suggestions) –∏ –ø—É—Å—Ç–æ–π answer.
    """
    qn = normalize(user_query)
    if not qn:
        return MatchResult(None, None, 0.0, ())

    best_key = None
    best_score = 0.0

    # 1) –¢–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ ‚Äî –≤—ã—Å–æ–∫–∏–π –±–∞–ª–ª
    for key, trig_list in NORM_TRIGGERS.items():
        for trig in trig_list:
            if trig and trig in qn:
                score = 0.95 * (len(trig) / (len(qn) + 1e-9)) ** 0.25
                if score > best_score:
                    best_score = score
                    best_key = key

    # 2) Fuzzy-—Å–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–∞–º (difflib)
    for key, trig_list in NORM_TRIGGERS.items():
        for trig in trig_list:
            if not trig:
                continue
            s = sim(trig, qn)
            # –ù–µ–º–Ω–æ–≥–æ —É—Å–∏–ª–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ, –Ω–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if len(trig) <= 12 and trig in qn:
                s = max(s, 0.85)
            if s > best_score:
                best_score = s
                best_key = key

    if best_key and best_score >= threshold:
        return MatchResult(
            ANSWERS[best_key],
            best_key,
            round(best_score, 3),
            ()
        )

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º
    scored = []
    for key, trig_list in NORM_TRIGGERS.items():
        local = max((sim(trig, qn) for trig in trig_list), default=0.0)
        scored.append((local, key))
    scored.sort(reverse=True)
    suggestions = tuple(k for _, k in scored[:3])

    return MatchResult(None, None, round(best_score, 3), suggestions)

# ---------- –°–ë–û–†–ö–ê –ó–ù–ê–ù–ò–ô –î–õ–Ø GPT/–õ–û–ì–û–í ----------

def build_faq_knowledge() -> str:
    """–°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞: '–í–æ–ø—Ä–æ—Å: <—Å–∏–Ω–æ–Ω–∏–º—ã>\\n–û—Ç–≤–µ—Ç: <—Ç–µ–∫—Å—Ç>' ‚Äî —É–¥–æ–±–Ω–æ –æ—Ç–¥–∞–≤–∞—Ç—å LLM."""
    parts = []
    for intent in INTENTS:
        parts.append(
            "–í–æ–ø—Ä–æ—Å: " + ", ".join(intent.triggers) + "\n" +
            "–û—Ç–≤–µ—Ç: " + intent.answer
        )
    return "\n\n".join(parts)

faq_knowledge = build_faq_knowledge()

# Backward compatibility alias
FAQ = faq_knowledge

# ---------- TODO (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
# 1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'rapidfuzz' –∏ –∑–∞–º–µ–Ω–∏—Ç–µ difflib –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
#    from rapidfuzz import fuzz
#    def sim(a,b): return fuzz.token_set_ratio(a,b) / 100
# 2) –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—é (pymorphy2) –∏ —Ç–æ–∫–µ–Ω-–æ–≤–µ—Ä–ª–∞–ø.
# 3) –í—ã–Ω–µ—Å—Ç–∏ —Ü–µ–Ω—ã/–ø–æ—Ä–æ–≥–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –≤ JSON –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–¥–æ –º–∞—Ä—Ç–∞¬ª).
# 4) –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–µ—É–∑–Ω–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ª–æ–≥, —á—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ä—è—Ç—å –±–∞–∑—É.
